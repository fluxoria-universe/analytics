# Flux-sight GraphQL Schema
# Auto-generated by Ponder from ponder.schema.ts
# Extends with custom queries and authentication directives

"""
Pagination input for cursor-based navigation
"""
input PageInput {
  """Maximum number of results per page (max: 1000)"""
  limit: Int = 100
  
  """Cursor for next page (opaque string from previous response)"""
  cursor: String
}

"""
Pagination metadata in responses
"""
type PageInfo {
  """Cursor for next page, null if last page"""
  nextCursor: String
  
  """Total count of results (may be expensive for large datasets)"""
  totalCount: Int
  
  """Whether more results exist"""
  hasNextPage: Boolean!
}

"""
Time range filter for event queries
"""
input TimeRangeInput {
  """Start time (ISO 8601 timestamp or Unix seconds)"""
  from: String
  
  """End time (ISO 8601 timestamp or Unix seconds)"""
  to: String
}

"""
Block range filter for event queries
"""
input BlockRangeInput {
  """Start block number (inclusive)"""
  from: Int!
  
  """End block number (inclusive)"""
  to: Int
}

"""
Sorting direction
"""
enum SortDirection {
  ASC
  DESC
}

"""
DEX Contract Configuration
"""
type DEXContract {
  """Contract address (checksummed)"""
  id: ID!
  
  """Ethereum contract address"""
  address: String!
  
  """Chain ID (1 for mainnet)"""
  chainId: Int!
  
  """Human-readable name"""
  name: String
  
  """DEX protocol type"""
  protocol: DEXProtocol!
  
  """Block to start indexing from"""
  startBlock: String!
  
  """Current indexing status"""
  status: IndexingStatus!
  
  """When contract was configured"""
  configuredAt: String!
  
  """Last indexed block number"""
  lastIndexedBlock: String
  
  """All pools for this DEX"""
  pools(page: PageInput): PoolConnection!
}

"""
DEX protocol variants
"""
enum DEXProtocol {
  UNISWAP_V2
  UNISWAP_V3
  SUSHISWAP
  PANCAKESWAP
}

"""
Indexing status states
"""
enum IndexingStatus {
  PENDING
  ACTIVE
  PAUSED
  ERROR
}

"""
Liquidity Pool
"""
type Pool {
  """Pool contract address"""
  id: ID!
  
  """Parent DEX contract"""
  dexContract: DEXContract!
  
  """First token address"""
  tokenA: String!
  
  """Second token address"""
  tokenB: String!
  
  """Fee tier in basis points (e.g., 3000 = 0.3%)"""
  feeTier: Int!
  
  """Tick spacing for concentrated liquidity (Uniswap V3)"""
  tickSpacing: Int
  
  """Block number when pool created"""
  blockNumber: String!
  
  """Block hash for reorg validation"""
  blockHash: String!
  
  """Pool creation timestamp (UTC)"""
  timestamp: String!
  
  """Transaction hash"""
  transactionHash: String!
  
  """Initialization event (if initialized)"""
  initialize: InitializeEvent
  
  """Recent swaps"""
  swaps(
    page: PageInput
    timeRange: TimeRangeInput
    blockRange: BlockRangeInput
    sort: SortDirection = DESC
  ): SwapConnection!
  
  """Liquidity modifications"""
  positions(
    page: PageInput
    timeRange: TimeRangeInput
    owner: String
  ): ModifyPositionConnection!
  
  """Fee collections"""
  collects(
    page: PageInput
    timeRange: TimeRangeInput
    owner: String
  ): CollectConnection!
  
  """TVL history"""
  tvlHistory(
    timeRange: TimeRangeInput
    page: PageInput
  ): TVLConnection!
  
  """Current TVL snapshot"""
  currentTVL: TVLRecord
}

"""
Pool initialization event
"""
type InitializeEvent {
  """Event ID (txHash + logIndex)"""
  id: ID!
  
  """Pool being initialized"""
  pool: Pool!
  
  """Starting price (Q96 fixed-point)"""
  sqrtPriceX96: String!
  
  """Starting tick"""
  tick: Int!
  
  """Human-readable price (derived)"""
  price: Float!
  
  """Block number"""
  blockNumber: String!
  
  """Block hash"""
  blockHash: String!
  
  """Timestamp (UTC)"""
  timestamp: String!
  
  """Transaction hash"""
  transactionHash: String!
  
  """Log index in transaction"""
  logIndex: Int!
}

"""
Swap (trade) event
"""
type SwapEvent {
  """Event ID (txHash + logIndex)"""
  id: ID!
  
  """Pool where swap occurred"""
  pool: Pool!
  
  """Address initiating swap"""
  sender: String!
  
  """Address receiving output"""
  recipient: String!
  
  """Token0 amount delta (wei)"""
  amount0: String!
  
  """Token1 amount delta (wei)"""
  amount1: String!
  
  """Price after swap (Q96 fixed-point)"""
  sqrtPriceX96: String!
  
  """Human-readable price (derived)"""
  price: Float!
  
  """Active liquidity"""
  liquidity: String!
  
  """Current tick after swap"""
  tick: Int!
  
  """Block number"""
  blockNumber: String!
  
  """Block hash"""
  blockHash: String!
  
  """Timestamp (UTC)"""
  timestamp: String!
  
  """Transaction hash"""
  transactionHash: String!
  
  """Log index in transaction"""
  logIndex: Int!
  
  """Estimated volume in USD (requires price oracle)"""
  volumeUSD: Float
}

"""
Liquidity position modification
"""
type ModifyPositionEvent {
  """Event ID (txHash + logIndex)"""
  id: ID!
  
  """Pool where position modified"""
  pool: Pool!
  
  """Position owner"""
  owner: String!
  
  """Lower tick bound"""
  tickLower: Int!
  
  """Upper tick bound"""
  tickUpper: Int!
  
  """Liquidity change (positive = add, negative = remove)"""
  liquidityDelta: String!
  
  """Token0 amount"""
  amount0: String!
  
  """Token1 amount"""
  amount1: String!
  
  """Block number"""
  blockNumber: String!
  
  """Block hash"""
  blockHash: String!
  
  """Timestamp (UTC)"""
  timestamp: String!
  
  """Transaction hash"""
  transactionHash: String!
  
  """Log index in transaction"""
  logIndex: Int!
}

"""
Fee/liquidity collection
"""
type CollectEvent {
  """Event ID (txHash + logIndex)"""
  id: ID!
  
  """Pool where fees collected"""
  pool: Pool!
  
  """Position owner"""
  owner: String!
  
  """Recipient address"""
  recipient: String!
  
  """Lower tick"""
  tickLower: Int!
  
  """Upper tick"""
  tickUpper: Int!
  
  """Token0 amount collected"""
  amount0: String!
  
  """Token1 amount collected"""
  amount1: String!
  
  """Block number"""
  blockNumber: String!
  
  """Block hash"""
  blockHash: String!
  
  """Timestamp (UTC)"""
  timestamp: String!
  
  """Transaction hash"""
  transactionHash: String!
  
  """Log index in transaction"""
  logIndex: Int!
}

"""
Total Value Locked snapshot
"""
type TVLRecord {
  """Record ID (poolId + timestamp)"""
  id: ID!
  
  """Pool being measured"""
  pool: Pool!
  
  """Token0 liquidity"""
  tvlToken0: String!
  
  """Token1 liquidity"""
  tvlToken1: String!
  
  """Total value in USD"""
  tvlUSD: Float
  
  """Change since last record"""
  liquidityDelta: String!
  
  """Snapshot timestamp"""
  computedAt: String!
  
  """Block number at snapshot"""
  blockNumber: String!
}

"""
Connection types for pagination
"""
type PoolConnection {
  items: [Pool!]!
  pageInfo: PageInfo!
}

type SwapConnection {
  items: [SwapEvent!]!
  pageInfo: PageInfo!
}

type ModifyPositionConnection {
  items: [ModifyPositionEvent!]!
  pageInfo: PageInfo!
}

type CollectConnection {
  items: [CollectEvent!]!
  pageInfo: PageInfo!
}

type TVLConnection {
  items: [TVLRecord!]!
  pageInfo: PageInfo!
}

"""
Root Query Type
"""
type Query {
  """
  Get DEX contract by address
  Requires: READ role
  """
  dexContract(address: String!): DEXContract
  
  """
  List all configured DEX contracts
  Requires: READ role
  """
  dexContracts(
    status: IndexingStatus
    page: PageInput
  ): [DEXContract!]!
  
  """
  Get pool by address
  Requires: READ role
  """
  pool(id: ID!): Pool
  
  """
  Search pools by token pair
  Requires: READ role
  """
  poolsByTokens(
    tokenA: String!
    tokenB: String!
    feeTier: Int
    page: PageInput
  ): PoolConnection!
  
  """
  Get recent swaps across all pools
  Requires: READ role
  """
  recentSwaps(
    poolId: ID
    timeRange: TimeRangeInput
    blockRange: BlockRangeInput
    page: PageInput
  ): SwapConnection!
  
  """
  Get liquidity positions for an owner
  Requires: READ role
  """
  positionsByOwner(
    owner: String!
    poolId: ID
    timeRange: TimeRangeInput
    page: PageInput
  ): ModifyPositionConnection!
  
  """
  Get TVL across all pools at a point in time
  Requires: READ role
  """
  aggregateTVL(
    timestamp: String
  ): Float!
  
  """
  Health check (unauthenticated)
  """
  health: HealthStatus!
}

"""
Health status response
"""
type HealthStatus {
  """API status"""
  status: String!
  
  """Last indexed block across all contracts"""
  lastBlock: String!
  
  """Indexing lag in seconds"""
  lagSeconds: Int!
  
  """Server timestamp"""
  timestamp: String!
}

"""
Root Mutation Type (operator-only)
"""
type Mutation {
  """
  Configure new DEX contract to index
  Requires: ADMIN role
  """
  addDEXContract(
    address: String!
    chainId: Int!
    name: String
    protocol: DEXProtocol!
    startBlock: String!
  ): DEXContract!
  
  """
  Pause indexing for a contract
  Requires: ADMIN role
  """
  pauseIndexing(address: String!): DEXContract!
  
  """
  Resume indexing for a contract
  Requires: ADMIN role
  """
  resumeIndexing(address: String!): DEXContract!
}

"""
Authentication directive (custom implementation)
"""
directive @auth(
  """Required roles (READ, WRITE, ADMIN)"""
  requires: [String!]
) on FIELD_DEFINITION

"""
Rate limit directive (custom implementation)
"""
directive @rateLimit(
  """Max requests per window"""
  max: Int!
  
  """Window duration in seconds"""
  window: Int!
) on FIELD_DEFINITION

